/*
 * server_users_parser.cpp
 *
 *  Created on: Mar 27, 2015
 *      Author: majk
 */

#include "server_users_parser.h"

server_users_parser::server_users_parser
(vector <string> inquirySetter, vector <char> argFilter) {

	inquiry = inquirySetter;

	filter = argFilter;

	applyInquiry();

	//applyFilter();

	 for (auto it(output.begin()); it < output.end();++it)
			cout << *it << endl;
};

server_users_parser::~server_users_parser() {

};

void server_users_parser::applyFilter() {

	if (!filter.size())
		return;

	for (auto itOutput(output.begin()); itOutput < output.end(); ++itOutput) {


		for (auto itFilter(filter.begin()); itFilter < filter.end(); ++itFilter) {
				// TODO APPLY FILTER
		}

	}

};

void server_users_parser::applyInquiry () {

	string switcher (getSwitcher());

	parseFile();

	sortOut();
};

string server_users_parser::getSwitcher () {
	string switcher (*inquiry.begin());

	inquiry.erase(inquiry.begin());

	return switcher;
};

void server_users_parser::parseFile () {

	string line;

	vector <string> tmp (inquiry);

//	output.resize(tmp.size());

	openPasswd();	// opens file

	/*while (!getline(file, line).eof()) {

		auto nameEnd (line.find(":"));

		string name(line.substr(FIRST_CHAR, nameEnd));

		for (auto it (tmp.begin()); it < tmp.end(); ++it)
			if (!name.compare(*it)) {
				output.push_back(line);
				tmp.erase(it);
			}
	}*/

	for (auto it (inquiry.begin()); it < inquiry.end() ; ++it)
		output.push_back(defaultLoginOutput + *it);

	while (!getline(file, line).eof()) {

			auto nameEnd (line.find(":"));

			string name(line.substr(FIRST_CHAR, nameEnd));

			int position(0);
			for (auto it (tmp.begin()); it < tmp.end(); ++it) {
				if (!name.compare(*it)) {

					int olda = ;
					output.at((inquiry.size() - tmp.size()) + offset) = line;
					tmp.erase(it);
				}
				++position;
			}
		}

	 for (auto it(output.begin()); it < output.end();++it)
			cout << *it << endl;

	 exit (42);

	closePasswd();	// close file
};

void server_users_parser::sortOut() {
	vector <string> tmp (output);

	string name;

	bool set(false);

	output.clear();

	for (auto itI(inquiry.begin()); itI < inquiry.end(); ++itI) {
		for (auto itT(tmp.begin()); itT < tmp.end(); ++itT) {

			auto nameEnd = itT->find(":");

			name = itT->substr(FIRST_CHAR, nameEnd);

			if (!name.compare(*itI)) {
				output.push_back(*itT);
				tmp.erase(itT);
				set = true;
				break;
			}
		}

		if (set)
			set = false;
		else
			output.push_back(defaultLoginOutput + *itI);
	}
};

void server_users_parser::openPasswd () {
	file.open(path2passwd, ifstream::in);	// open passwd for reading

	if (file.is_open())		// if its open
		return;
};

void server_users_parser::closePasswd() {
	file.close();
};

const char* server_users_parser::defaultLoginOutput {"Chyba: neznamy login "};

const char* server_users_parser::path2passwd {"/home/majk/secured/passwd"};
