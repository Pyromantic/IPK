#include "socket_binder_unix.h"

socket_binder::socket_binder() {

}

socket_binder::~socket_binder() {

}

void socket_binder::binder() {

		int sockfd, newsockfd, portno;

		socklen_t clilen;

		char buffer[256];

		struct sockaddr_in serv_addr, cli_addr;

		int n;

		sockfd = socket(AF_INET, SOCK_STREAM, 0);

		if (sockfd < 0)
			throw socket_errors[ERROR_OPENING];



		bzero((char *)&serv_addr, sizeof(serv_addr));

		portno = atoi(argv[1]);

		serv_addr.sin_family = AF_INET;

		serv_addr.sin_addr.s_addr = INADDR_ANY;

		serv_addr.sin_port = htons(portno);

		if (bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0) 
			error("ERROR on binding");
		
		listen(sockfd, 5);

		clilen = sizeof(cli_addr);

		newsockfd = accept(sockfd,(struct sockaddr *) &cli_addr,&clilen);

		if (newsockfd < 0)
			error("ERROR on accept");

		bzero(buffer, 256);

		n = read(newsockfd, buffer, 255);

		if (n < 0) error("ERROR reading from socket");
		printf("Here is the message: %s\n", buffer);

		n = write(newsockfd, "I got your message", 18);

		if (n < 0) error("ERROR writing to socket");

		close(newsockfd);

		close(sockfd);

		return 0;
}

const char* socket_binder::socket_errors[] {
	"ERROR opening socket",
	"too many arguments to a successful server call",
	"first argument must be port",
	"invalid port number",
};


