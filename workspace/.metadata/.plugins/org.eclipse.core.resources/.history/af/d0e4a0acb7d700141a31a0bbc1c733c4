#include "server_host_handle.h"

host_handle::host_handle(int listener) {
	handleHost(listener);
};

host_handle::~host_handle() {

}

void host_handle::handleHost (int listener) {	// Initial host

	acceptHost(listener);	// accept host and sets host socket

	vector <string> inquiry (receiveVector());	// get inquiry

	vector <char> filter (getFilter());			// get filter

	server_users_parser parser (inquiry, filter);	// dig data

	sendVector(parser.getOutput());		// sends digged data back to client

	close (hostSocket);		// close host socket
}

void host_handle::acceptHost (int listener) {

	struct sockaddr_in cli_addr;

	unsigned int clilen = sizeof(cli_addr);

	hostSocket = accept(listener, (struct sockaddr *) (&cli_addr), &clilen);

	nCheck (hostSocket, ACCEPT_ERROR);
};

vector <char> host_handle::getFilter () {

	unsigned int bufferSize (receiveArgc());

	vector <char> buffer;

	if (bufferSize)
		buffer.resize(bufferSize);
	else
		return buffer;

	int n = read (hostSocket, &buffer[0], bufferSize);

	nCheck(n, READ_ERROR);

	return buffer;
};

const char* host_handle::receiver_errors[] {
	"ERROR on accept",
};


