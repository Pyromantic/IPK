/*
 * client_sender.cpp
 *
 *  Created on: Mar 21, 2015
 *      Author: majk
 */

#include "client_sender.h"

client_sender::client_sender (client_args arguments) : communicati(0) {
	args = std::move(arguments);		// args init
}

client_sender::~client_sender() {

}

void client_sender::beginCommunication () {

	struct sockaddr_in serv_addr;

	struct hostent *server;

	communicati = socket(AF_INET, SOCK_STREAM, 0);

	if (communicati < 0)
		throw sender_errors[OPENING_ERROR];

	server = gethostbyname(args.getHostname().c_str());

	if (server == NULL)
		throw sender_errors[NOHOST_ERROR];

	bzero((char *) &serv_addr, sizeof(serv_addr));

	serv_addr.sin_family = AF_INET;

	bcopy((char *)server->h_addr, (char *)&serv_addr.sin_addr.s_addr, server->h_length);

    serv_addr.sin_port = htons(args.getPortNumber());

    if (connect(communicati, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0)
        throw sender_errors[CONNECT_ERROR];

}

void client_sender::sendStuff() {

		std::string message = args.getAssortmentValue();

		int n;

		char buffer[255]{};

		unsigned int last(0);

		message.copy(buffer, 253, last);

		bool repeater(true);

	    while (repeater) {

	    	n = write(communicati, buffer, sizeof(buffer));

	    	nCheck (n, WRITE_ERROR);

			if (message.size() > last) {

				if (message.size() > (last+254))
					last += 254;
				else
					last += (message.size() - last);

				message.copy(buffer, 253, last);

				buffer[254] = (message.size() > last) ? ANOTHER_MESSAGE : LAST_MESSAGE;

			} else
				repeater = false;

			if (buffer[254] =!= LAST_MESSAGE) {

			char readBuffer[2]{};

			n = read(communicati, readBuffer, sizeof(readBuffer));

			nCheck (n, READING_ERROR);

			readBuffer[1] = AFFIRMATIVE;

			if (readBuffer[0] != AFFIRMATIVE) {
				std::cout << readBuffer << std::endl;
				nCheck (-1, TRANSMIT_ERROR);
			}
			}
	    }

	    char readBuffer[255]{};

		n = read(communicati, readBuffer, sizeof(readBuffer));

		nCheck (n, READING_ERROR);

		std::cout << readBuffer << std::endl;

		close(communicati);

};

const char* client_sender::sender_errors[] {	// list of client errors
		"ERROR opening socket",
		"ERROR, no such host",
		"ERROR connecting",
		"ERROR writing to socket",
		"ERROR reading from socket",
		"ERROR transmiting stuff"
};
