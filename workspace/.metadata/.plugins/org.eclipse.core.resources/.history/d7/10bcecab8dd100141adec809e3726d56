/*
 * serverlistener.cpp
 *
 *  Created on: Mar 21, 2015
 *      Author: majk
 */

#include "server_listener.h"

using namespace std;

server_listener::server_listener() : socket(0) {
}

server_listener::~server_listener() {

}

void server_listener::inicializeServer (int socketNumber) {	// Initial server

	listener

	listen(socketNumber, 5);

	listener();	// starts listening

	getArguments();			// get arguments

	close(socket);			// close socket, exits server
}

void server_listener::acceptHost (int socketNumber) {



	struct sockaddr_in cli_addr;

	unsigned int clilen = sizeof(cli_addr);

	socket = accept(socketNumber, (struct sockaddr *)(&cli_addr), &clilen);

	nCheck (socket, ACCEPT_ERROR);

}

void server_listener::getArguments () {			// gets arguments

	// handshake - receiving argc

	unsigned int argc (getArgc());

	cout << argc << endl;

	while (argc > 0) {

		unsigned int bufferSize (getBufferSize());	// handshake - receiving bufferSize

		cout << bufferSize << endl;

		string message (getArgument);				// actual message receiver

		cout << message << endl;
	}

}

unsigned int server_listener::getArgc () {			// handshake - receiving argc
	unsigned int argc;

	int n = read(socket, &argc, sizeof(argc));

	nCheck(n, READING_ERROR);

	return argc;
}

unsigned int server_listener::getBufferSize () {	// handshake - receiving bufferSize
	unsigned int bufferSize;

	int n = read(newsockfd, &bufferSize, sizeof(bufferSize));

	nCheck(n, READING_ERROR);

	return bufferSize;
}

string server_listener::getArgument() {				// actual message receiver

	vector <char> buffer (bufferSize);

	int n = read(socket, &buffer[0], buffer.size());

	nCheck (n, READING_ERROR);

	string str (buffer.begin(), buffer.end());

	return str;
}

const char* server_listener::listener_errors[] {
	"ERROR on accept",
	"ERROR reading from socket",
	"ERROR writing to socket",
	"Unknown transmit error",
};
